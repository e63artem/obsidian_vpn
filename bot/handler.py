import asyncio
import json
import os.path
import re
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import CommandStart, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto, LabeledPrice, PreCheckoutQuery, \
    InputMediaDocument
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.interval import IntervalTrigger

import config
from config import Config
from bot import keyboards as kb
from utils import auto_state_clear, msg_ids, logger, captions
import db
from integrations import google_api as ggl

scheduler = AsyncIOScheduler()
dp = Dispatcher()
bot = Bot(token=Config.BOT_TOKEN)
user = {}


class States(StatesGroup):
    ref = State()
    phone_number = State()
    email = State()


@dp.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


async def delete_message_after(message: Message):
    await asyncio.sleep(120)
    try:
        await message.delete()
    except TelegramBadRequest as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}')


@dp.message(CommandStart(deep_link=True))
async def start_with_deeplink(message: Message, command: CommandObject):
    uid = message.from_user.id
    try:
        await db.delete_invoice(uid)
    except Exception:
        pass
    username = message.from_user.username if message.from_user.username else message.from_user.full_name
    ref_id = None
    if command.args:
        ref_id = command.args
        await db.update_user(uid, is_referrer=True)
    if int(ref_id) == uid:
        await message.answer('<b>–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –ø–ª–æ—Ö–∞—è –∏–¥–µ—è - '
                             '–ø–æ—Å—ã–ª–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É —Å–∞–º–æ–º—É —Å–µ–±–µ!</b>',
                             parse_mode='HTML')
        ref_id = None
    try:
        msg = await bot.send_message(ref_id, '–í–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å! '
                                             '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 25% –æ—Ç –ø–æ–∫—É–ø–æ–∫ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞, –∞ –æ–Ω - '
                                             '25% –∫–µ—à–±–µ–∫–∞ –æ—Ç —Å–≤–æ–∏—Ö –ø–æ–∫—É–ø–æ–∫‚ò∫Ô∏è')
        _ = asyncio.create_task(delete_message_after(msg))
    except TelegramBadRequest:
        pass
    success = await db.create_user(uid,
                                   username,
                                   ref_id=ref_id)
    if success:
        await message.answer_photo(FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png')),
                                   reply_markup=kb.start_keyboard)
    else:
        await message.answer('–í—ã —Ä–∞–Ω–µ–µ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É')
        await message.answer_photo(FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png')),
                                   reply_markup=kb.start_keyboard)


@dp.message(CommandStart(deep_link=False))
async def start(message: Message):
    uid = message.from_user.id
    try:
        await db.delete_invoice(uid)
    except Exception as e:
        logger.info(f'{e}')
    username = message.from_user.username if message.from_user.username else message.from_user.full_name
    await db.create_user(uid,
                         username)
    await message.answer_photo(FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png')),
                               reply_markup=kb.start_keyboard)


async def check_configs(callback: CallbackQuery) -> bool:
    configs = await db.get_all_configs()
    if not configs or all(conf["assigned"] for conf in configs):
        await callback.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ ‚ö†Ô∏è')
        await callback.message.answer(
            '‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç',
            reply_markup=kb.clear
        )
        await bot.send_message(
            Config.ADMIN_ID,
            '–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë'
        )
        return False
    return True


@dp.callback_query()
@auto_state_clear()
async def callback_handler(callback: CallbackQuery, state: FSMContext):
    uid = callback.from_user.id
    data = callback.data
    message = callback.message
    if data == 'main_menu':
        await state.clear()
        try:
            await db.delete_invoice(uid)
        except Exception as e:
            logger.info(f'{e}')
        try:
            await bot.delete_messages(uid, list(msg_ids[uid]))
            await message.delete()
        except TelegramBadRequest:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
        await callback.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        media = InputMediaPhoto(media=FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png')))
        try:
            await message.edit_media(media, reply_markup=kb.start_keyboard)
        except TelegramBadRequest:
            await message.answer_photo(FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png')),
                                       reply_markup=kb.start_keyboard)
    # ---------------------------–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –í–ü–ù-----------------------------
    elif data.startswith('choose_'):
        await db.reg_invoice(uid)
        device = data.split('_')[1]
        logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª {device}')
        await callback.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        if db_user := await db.get_user_data(uid):
            logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω')
            if phone_num := db_user.get('phone_number'):
                logger.info(f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω: {phone_num}')
                if email := db_user.get('email'):
                    logger.info(f'Email –Ω–∞–π–¥–µ–Ω: {email}')
                    user[uid] = {
                        'phone': phone_num,
                        'email': email,
                        'device': device
                    }
                    msg = await message.answer('–ù—É–∂–Ω–æ–µ –í–∞–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:',
                                               #'–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å',
                                               reply_markup=kb.nums)
                    msg_ids[uid].add(msg.message_id)
                    return
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        if uid not in user:
            user[uid] = {}
        user[uid] = {
            'device': device
        }
        try:
            msg = await message.edit_caption(
                caption='–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ, '
                        '–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. '
                        '–î–ª—è –Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ —Ñ–æ—Ä–º–µ +79990000000:',
                reply_markup=kb.main_menu
            )
            msg_ids[uid].add(msg.message_id)
        except TelegramBadRequest:
            msg = await message.edit_text(
                '–ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. '
                '–î–ª—è –Ω–∞—á–∞–ª–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ —Ñ–æ—Ä–º–µ +79990000000:',
                reply_markup=kb.main_menu
            )
            msg_ids[uid].add(msg.message_id)
        await state.set_state(States.phone_number)
        msg_ids[uid].add(message.message_id)
        logger.info(f'{user[uid]}')
    elif data == 'connect_vpn':
        if not await check_configs(callback):
            return
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        media = InputMediaPhoto(
            media=FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png')),
            caption='–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚§µÔ∏è'
        )
        msg = await message.edit_media(media, reply_markup=kb.choose_device)
        msg_ids[uid].add(msg.message_id)
    elif data.startswith('tariff_'):
        await callback.answer("–û–ø–ª–∞—Ç–∞")
        months = int(data.split('_')[1])
        user_info = await db.get_user_data(uid)
        user_credits = user_info['credits_on_account']
        media = InputMediaPhoto(media=FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png')),
                                caption=f'–°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã?\n'
                                        f'üè¶ –ë–∞–ª–∞–Ω—Å: ({user_credits})\n'
                                        f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –±–æ–Ω—É—Å–∞–º–∏ - 100‚ÇΩ')
        config_id = None
        if data.endswith('cid'):
            config_id = int(data.split('_')[2])
            conf_info = await db.get_config_by_id(config_id)
            await db.reg_invoice(uid)
            device = conf_info['device']
            user[uid] = {
                'device': device
            }
        match months:
            case 1:
                summ = 299
            case 3:
                summ = 699
            case 6:
                summ = 1199
            case 12:
                summ = 2299
            case _:
                summ = 299
        logger.info('updating invoice')
        invoice = await db.update_invoice(
            uid,
            summary=summ,
            days_to_increase=months*30,
            config_id=config_id
        )
        logger.info(f'{invoice}')
        await message.edit_media(media, reply_markup=kb.use_credits)
    elif data in ['use', 'not use']:
        flag = True if data == 'use' else False
        invoice = await db.update_invoice(
            uid,
            use_credits=flag,
        )
        months = int(invoice['days_to_increase']//30)
        media = InputMediaPhoto(media=FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png')))
        await message.edit_media(media, reply_markup=kb.payment_options(months))
    elif data == 'no_ref':
        await state.clear()
        await message.edit_text('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é',
                                reply_markup=kb.main_menu)
    # ---------------------------–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç------------------------------
    elif data == 'account':
        await callback.answer("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
        me = await db.get_user_data(uid)
        pay_datetime = me['pay_date_time'] if me['pay_date_time'] else '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'
        credits_on_acc = me['credits_on_account']
        text = (f'üìÖ –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø–ª–∞—Ç—ã:   {pay_datetime}\n\n'
                f'üè¶ –ë–æ–Ω—É—Å–æ–≤ –Ω–∞ —Å—á–µ—Ç—É:   {credits_on_acc}\n\n'
                f'üì± –í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:')

        media = InputMediaPhoto(media=FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png')), caption=text)
        await message.edit_media(media, reply_markup=await kb.account(uid))
    # -------------------------–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞-------------------------
    elif data == 'referral':
        await callback.answer('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞')
        msg_ids[uid].add(message.message_id)
        bot_info = await bot.me()
        ref_code = f'https://t.me/{bot_info.username}?start={uid}'
        await message.answer('üî• –í–∞–º - 20% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è\n'
                             #'–∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n'
                             'üéÅ –†–µ—Ñ–µ—Ä–∞–ª—É - —Å–∫–∏–¥–∫–∞ 20% –Ω–∞ –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã\n'
                             'üìç–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n\n'
                             '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:\n\n'
                             f'<code>{ref_code}</code>',
                             reply_markup=kb.main_menu,
                             parse_mode='HTML')
    # --------------------------------–ü–æ–º–æ—â—å---------------------------------
    elif data == 'help':
        await callback.answer('–ü–æ–º–æ—â—å')
        media = InputMediaPhoto(media=FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png')))
        await message.edit_media(media, reply_markup=kb.help_kb)
    elif data == 'instructions':
        instructions = await ggl.get_instructions()
        headers: list[str] = list(instructions.keys())
        texts: list[str] = []
        links = []
        if instructions:
            for header in headers:
                _text, _link = instructions[header]
                text: str = _text
                link: str = _link
                texts.append(text)
                links.append(link)
            await message.delete()
            for i in range(len(headers)):
                try:
                    reply_markup = kb.main_menu if i + 1 == len(headers) else None
                    if links[i]:
                        msg = await bot.send_photo(
                            chat_id=uid,
                            photo=links[i],
                            caption=f'<b>{headers[i].capitalize()}</b>\n\n{texts[i]}',
                            reply_markup=reply_markup,
                            parse_mode='HTML'
                        )
                    else:
                        msg = await bot.send_message(
                            chat_id=uid,
                            text=f'<b>{headers[i].capitalize()}</b>\n\n{texts[i]}',
                            reply_markup=reply_markup,
                            parse_mode='HTML'
                        )
                    msg_ids[uid].add(msg.message_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {headers[i]} –¥–ª—è {uid}: {e}")
        else:
            await message.edit_caption(caption='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã...',
                                       reply_markup=kb.main_menu)
    # ---------------------------- –û–ø–ª–∞—Ç–∞ --------------------------------s
    elif data.startswith('yookassa_'):
        await message.delete()
        months = int(data.split('_')[1])
        days = months * 30
        match months:
            case 1:
                summ = 299
            case 3:
                summ = 699
            case 6:
                summ = 1199
            case 12:
                summ = 2299
            case _:
                summ = 299
        invoice_info = await db.get_invoice_by_uid(uid)
        number_of_configs = int(invoice_info['number_of_configs'])
        logger.info(number_of_configs)
        summ *= number_of_configs
        logger.info(summ)
        use_credits = invoice_info['use_credits']
        if db_user := await db.get_user_data(uid):
            logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω')
            if phone_num := db_user.get('phone_number'):
                logger.info(f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞–π–¥–µ–Ω: {phone_num}')
                if email := db_user.get('email'):
                    logger.info(f'Email –Ω–∞–π–¥–µ–Ω: {email}')
                    user[uid]['phone'] = phone_num
                    user[uid]['email'] = email
        credits_on_acc = db_user['credits_on_account']
        if use_credits and credits_on_acc > 0:
            if summ <= credits_on_acc:
                credits_used = summ - 100
                summ = 100
                credits_on_acc -= credits_used
            elif credits_on_acc <= summ - 100:
                summ -= credits_on_acc
                credits_on_acc = 0
            else:
                credits_used = summ - 100
                summ = 100
                credits_on_acc -= credits_used
        name, price = '–û–ø–ª–∞—Ç–∞ VPN', summ * 100
        pr = [LabeledPrice(label=name, amount=int(price))]
        description = f'{days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ - {summ} —Ä—É–±–ª–µ–π'
        time_data = datetime.now().strftime('%Y-%m-%d %H-%M-%S')
        pld = f'{callback.from_user.id}_{time_data}_{credits_on_acc}'
        provider_data = {
            'receipt': {
                'customer': {
                    'full_name': callback.from_user.full_name,
                    'phone': user[uid]['phone'],
                    'email': user[uid]['email']
                },
                'items': [
                    {
                        'description': description,
                        'quantity': 1,
                        'amount': {
                            'value': price / 100,
                            'currency': 'RUB'
                        },
                        "vat_code": 1,
                        "payment_mode": "full_payment",
                        "payment_subject": "commodity"
                    }
                ],
                "tax_system_code": 1
            }
        }
        invoice = None
        try:
            invoice = await \
                callback.message.answer_invoice(title=name,
                                                description=description,
                                                payload=pld,
                                                provider_token=Config.PROVIDER_TOKEN,
                                                currency='RUB',
                                                prices=pr,
                                                provider_data=json.dumps(provider_data),
                                                )
        except Exception as e:
            logger.error(f"{e}")
        msg_ids[uid].add(invoice.message_id)
        back_msg = await message.answer('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚§µÔ∏è',
                                        reply_markup=kb.main_menu)
        msg_ids[uid].add(back_msg.message_id)
    elif data == 'add_device':
        if not await check_configs(callback):
            return
        media = InputMediaPhoto(
            media=FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png')),
            caption='–í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ‚§µÔ∏è'
        )
        msg = await message.edit_media(media, reply_markup=kb.choose_device)
        msg_ids[uid].add(msg.message_id)
    elif data in ['ios', 'android', 'windows', 'mac']:
        media = InputMediaPhoto(media=FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png')))
        await message.edit_media(media, reply_markup=kb.connect_vpn())
    elif data.startswith('device_'):
        config_id = data.split('_')[1]
        config_info = await db.get_config_by_id(config_id)
        conf_path = config_info['filename']
        device: str = config_info['device']
        exp_date = config_info['expired']  # —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ 'YYYY-MM-DD'
        now = datetime.now().strftime('%Y-%m-%d')

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã datetime
        exp_dt = datetime.strptime(exp_date, '%Y-%m-%d')
        now_dt = datetime.strptime(now, '%Y-%m-%d')

        # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–Ω—è—Ö
        days_left = (exp_dt - now_dt).days
        await message.delete()

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            await callback.message.answer_document(
                document=FSInputFile(conf_path),
                caption=f"üì≤ –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ - {device}\n"
                        f"‚è≥ –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π",
                reply_markup=kb.back_to_acc(int(config_id))
            )
            await callback.answer("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ñ–∏–≥ {config_id}")

        except FileNotFoundError:
            logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {conf_path}")
            await callback.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ñ–∏–≥–∞ {config_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {str(e)}")
            await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}", show_alert=True)
    elif data.startswith('renew_'):
        config_id = data.split('_')[1]
        await callback.answer("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        media = InputMediaPhoto(media=FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png')))
        await message.edit_media(media, reply_markup=kb.connect_vpn(int(config_id)))
    elif data.endswith('_instructions'):
        await callback.answer('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é')
        device = data.split('_')[0]
        instructions = await ggl.get_instructions()
        headers: list[str] = list(instructions.keys())
        texts: list[str] = []
        links = []
        if instructions:
            for header in headers:
                _text, _link = instructions[header]
                text: str = _text
                link: str = _link
                texts.append(text)
                links.append(link)
            for i in range(len(headers)):
                if headers[i] == device:
                    logger.info(f'Header: {headers[i]}, device: {device}')
                    if links[i] is not None:
                        await bot.send_photo(
                            chat_id=uid,
                            photo=links[i],
                            caption=f'<b>{headers[i].capitalize()}</b>\n\n{texts[i]}',
                            reply_markup=kb.close_instruction,
                            parse_mode='HTML'
                        )
                    else:
                        await bot.send_message(
                            chat_id=uid,
                            text=f'<b>{headers[i].capitalize()}</b>\n\n{texts[i]}',
                            reply_markup=kb.close_instruction,
                            parse_mode='HTML'
                            )
        else:
            await message.edit_caption(caption='–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞...',
                                       reply_markup=kb.main_menu)
    elif data == 'close':
        await message.delete()
    await callback.answer()


@dp.message(F.text.isdigit())
async def numbers_handler(message: Message):
    uid = message.from_user.id
    msg_ids[uid].add(message.message_id)
    number = int(message.text)
    logger.info(number)
    if number > 100 or number < 1:
        msg = await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=kb.nums)
        msg_ids[uid].add(msg.message_id)
        return
    invoice = await db.update_invoice(
        uid,
        number_of_configs=number
    )
    media = FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png'))
    await message.answer_photo(media, reply_markup=kb.connect_vpn())


@dp.message(States.ref)
@auto_state_clear()
async def ref_handler(message: Message, state: FSMContext):
    await state.update_data(ref_code=message.text)
    await message.answer('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é',
                         reply_markup=kb.main_menu)


@dp.message(States.phone_number)
@auto_state_clear()
async def phone_number_handler(message: Message, state: FSMContext):
    uid = message.from_user.id
    msg_ids[uid].add(message.message_id)
    phone_num = message.text
    phone_pattern = re.compile(r"^\+7\d{10}$")
    if not phone_pattern.match(phone_num):
        msg = await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        msg_ids[uid].add(msg.message_id)
        return
    user[uid]['phone'] = phone_num
    msg = await message.answer('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')
    msg_ids[uid].add(msg.message_id)
    await state.set_state(States.email)


@dp.message(States.email)
async def email_handler(message: Message, state: FSMContext):
    uid = message.from_user.id
    msg_ids[uid].add(message.message_id)
    email = message.text
    email_pattern = re.compile(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$")
    if not email_pattern.match(email):
        msg = await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        msg_ids[uid].add(msg.message_id)
        return
    await state.clear()
    user[uid]['email'] = email
    kw = {
        'phone_number': user[uid]['phone'],
        'email': email
    }
    await db.update_user(uid, **kw)
    # photo = FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png'))
    msg = await message.answer(
        '–í–≤–µ–¥–∏—Ç–µ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º) –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ '
        '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏',
        reply_markup=kb.nums
    )
    msg_ids[uid].add(msg.message_id)


@dp.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    uid = message.from_user.id
    payment_info = message.successful_payment
    try:  # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg_id in msg_ids[uid]:
            await bot.delete_message(message.chat.id, msg_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    await message.answer(f"‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É\n"
                         f"{payment_info.total_amount / 100} {payment_info.currency} "
                         f"–±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω\n"
                         f"ü§ù –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –í—ã —Å –Ω–∞–º–∏!")
    pld = payment_info.invoice_payload
    credits_on_acc = int(pld.split('_')[2])
    await db.update_user(
        uid,
        credits_on_account=credits_on_acc
    )
    summ = payment_info.total_amount / 100
    invoice_data = await db.get_invoice_by_uid(uid)
    number_of_configs = invoice_data['number_of_configs']
    days = invoice_data['days_to_increase']
    info = await db.get_user_data(uid)
    ref_id = info['referrer']
    my_credits = info['credits_on_account']
    if ref_id is not None and ref_id != 'None':
        ref_info = await db.get_user_data(ref_id)
        ref_credits = ref_info['credits_on_account']
        await db.update_user(
            ref_id,
            credits_on_account=ref_credits + int(summ * 0.25),
        )
        await db.update_user(
            uid,
            credits_on_account=my_credits + int(summ * 0.25),
            referrer='None'
        )
    days_left = int(info['subscribe_days_left'])
    days_for_db = days + days_left
    now = datetime.now().strftime(format='%Y-%m-%d')
    await db.update_user(uid, pay_date_time=now, subscribe_days_left=days_for_db)
    invoice = await db.update_invoice(uid, paid=True, paid_at=now)
    await db.delete_invoice(uid)
    exp_date = (datetime.now() + timedelta(days=days)).strftime(format='%Y-%m-%d')
    config_id = invoice['config_id']
    if not config_id:
        media_group = []
        for i in range(number_of_configs):
            user_config = await db.get_free_vpn_config(uid, exp_date, user[uid]['device'])
            logger.info(f'{user_config}')
            file = FSInputFile(path=user_config['filename'])
            device = user_config['device']
            media = InputMediaDocument(
                media=file,
                caption=captions[device].format(days=days),
            )
            media_group.append(media)
        await message.answer_media_group(media_group)
        await message.answer('–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É—Ü–∫–∏—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
                             reply_markup=kb.get_instruction(user[uid]['device']))
    else:
        conf_info = await db.get_config_by_id(config_id)
        expired_date = datetime.strptime(conf_info['expired'], '%Y-%m-%d')
        new_expired_date = expired_date + timedelta(days=days)
        exp_date_str = new_expired_date.strftime('%Y-%m-%d')
        await db.update_exp_date(config_id, exp_date_str)
        device = conf_info['device']
        await message.answer(f'üîÑ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {device} –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π.')
    photo = FSInputFile(path=os.path.join(config.BASE_DIR, 'static/img.png'))
    await message.answer_photo(photo, reply_markup=kb.start_keyboard)


async def check_subscriptions():
    configs = await db.get_all_users()
    for conf in configs:
        device_id = conf['id']
        uid = conf['uid']
        device_type = conf['device']
        filename = str(conf['filename'])
        filename = os.path.basename(filename)
        expired_date = datetime.strptime(conf['expired'], "%Y-%m-%d").date()
        is_active = expired_date < datetime.now().date()
        if is_active:
            user_info = await db.get_user_data(uid)
            days_left = user_info['subscribe_days_left']
            phone = user_info['phone']
            conf_id = conf['file_id']
            if days_left == 0:
                try:
                    await bot.send_message(
                        Config.CHANNEL_ID,
                        f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è c id {uid} –∏ '
                        f'–Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone} \n'
                        '—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–Ω–µ—Å–µ–Ω–∞\n\n'
                        '–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: \n'
                        f'https://drive.google.com/file/d/{conf_id}/view?usp=drive_link'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await asyncio.sleep(1)
                try:
                    await bot.send_message(uid, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n'
                                                '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '
                                                f'{device_type}_{uid}_{filename} –∏—Å—Ç—ë–∫, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –µ—ë –ø—Ä–æ–¥–ª–∏—Ç—å.',
                                           reply_markup=kb.back_to_acc(device_id))
                    await last_notification(uid, device_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            elif days_left < 3:
                try:
                    await bot.send_message(
                        Config.CHANNEL_ID,
                        f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {uid} '
                        '—Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –º–µ–Ω—å—à–µ 3-—Ö –¥–Ω–µ–π, –æ–ø–ª–∞—Ç–∞ –Ω–µ –≤–Ω–µ—Å–µ–Ω–∞'
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await asyncio.sleep(1)
                try:
                    await bot.send_message(uid, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n'
                                                '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ '
                                                f'{device_type}_{uid}_{filename} –º–µ–Ω—å—à–µ 3-—Ö –¥–Ω–µ–π, '
                                                '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –µ—ë –ø—Ä–æ–¥–ª–∏—Ç—å.',
                                           reply_markup=kb.back_to_acc(device_id))
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await asyncio.sleep(1)


async def last_notification(uid, device_id):
    user_ = await bot.get_chat(uid)
    name = user_.full_name
    text = f'''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}!

–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º VPN, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –µ—ë –ø–æ–¥–∫–ª—é—á–∏—Ç—å'''
    scheduler.add_job(bot.send_message, DateTrigger(datetime.now() + timedelta(days=3)),
                      args=[uid, text],
                      kwargs={'reply_markup': kb.back_to_acc(device_id)})


async def main():
    await db.init_db()
    # ------------------------- –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á -------------------------
    scheduler.remove_all_jobs()  # —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    scheduler.add_job(ggl.download_configs, trigger=IntervalTrigger(minutes=10))
    scheduler.add_job(db.decrease_all_subscriptions, trigger=CronTrigger(hour=11, minute=40))
    scheduler.add_job(check_subscriptions, trigger=CronTrigger(hour=12))
    scheduler.start()  # –∑–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    #  -------------------------------------------------------------------
    _ = asyncio.create_task(ggl.download_configs())
    await dp.start_polling(bot)
